{
  "address": "0x74ef2B06A1D2035C33244A4a263FF00B84504865",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startAt",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endAt",
          "type": "uint32"
        }
      ],
      "name": "Launch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pledged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unpledged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pledged",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startAt",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endAt",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "cancelled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_startAt",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_endAt",
          "type": "uint32"
        }
      ],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "pledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pledgedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unpledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbabcbc9bde3025e9660a1bd68820b069f892882a098d611da656a57a5cf23d4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x74ef2B06A1D2035C33244A4a263FF00B84504865",
    "transactionIndex": 0,
    "gasUsed": "2305381",
    "logsBloom": "0x
    "blockHash": "0xf4c617afe468625edd3459b89905a249c3524cf482de7db370d7f92349a53c0f",
    "transactionHash": "0xcbabcbc9bde3025e9660a1bd68820b069f892882a098d611da656a57a5cf23d4",
    "logs": [],
    "blockNumber": 16678156,
    "cumulativeGasUsed": "2305381",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6ac2af84c62e3e79da2f4b435c51e448",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pledged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unpledged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledged\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endAt\",\"type\":\"uint32\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledgedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unpledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancel(uint256)\":{\"details\":\"function called by campaign creator to cancel a crowdfunding campaign\",\"params\":{\"_id\":\"- the uinique uint256 id of the campaign to be cancelled\"}},\"claim(uint256)\":{\"details\":\"function called by campaign creator to receive fundscaller must be creator, creator cannot have cancelled the campaign, campaign must have passed end at time, the campaign goal must have been met or exceededthis function can only be called once by creator\",\"params\":{\"_id\":\"- the uinique uint256 id of the campaign which funds are claimed\"}},\"initialize(address,uint256,uint256)\":{\"details\":\"dunction from @openzeppelin to initialize this as the base contract for upgradesmust be the first function called\"},\"launch(uint256,uint32,uint32)\":{\"details\":\"function called by campaign creator to create the crowdfunding campaign and add Campaign to mapping\",\"params\":{\"_endAt\":\"- the block.timestamp at which the campaign will end (note: must be >= starting time + minDuration and <= starting time + maxDuration)\",\"_goal\":\"- the amount of tokens the campaign aims to receive\",\"_startAt\":\"- the time the campaign will begin (note: _startAt time is passed in by creator and not necessarily the time the creator calls the launch function)\"}},\"pledge(uint256,uint256)\":{\"details\":\"function to transfer tokens from pledger into the contractsender must first call approve on the ERC20 token for this contract address and _amountcampaign must not be cancelled, must be within startAt and endAt times\",\"params\":{\"_amount\":\"- the amount of tokens trasferred from pledger into contract\",\"_id\":\"- the uinique uint256 id of the campaign to be pledged\"}},\"refund(uint256)\":{\"details\":\"function to refund ALL the pledged tokens from pledger in this contract back to the pledger AFTER a campaign has ended and failedwhen a funding goal is not met, pledgers are be able to get a refund of their pledged funds\",\"params\":{\"_id\":\"- the uinique uint256 id of the campaign to refund from\"}},\"unpledge(uint256,uint256)\":{\"details\":\"function for pledger to unpledge their tokens and receive them back BEFORE a campaign has ended (ex: unpledge if campaign cancelled before end time)pledger specifies amount of tokens to unpledge, if a campaign has ended and not met goal, pledger then calls refund function to receive all tokens back\",\"params\":{\"_amount\":\"- the amount of tokens transferred from contract back to pledger\",\"_id\":\"- the uinique uint256 id of the campaign to be unpledged\"}}},\"stateVariables\":{\"campaigns\":{\"details\":\"mapping of id to Campaign struct\"},\"count\":{\"details\":\"used to track and update unique campaign ids\"},\"maxDuration\":{\"details\":\"maximum and minimum length of times a campaign can be Set in initalize function\"},\"pledgedAmount\":{\"details\":\"mapping of campaign id to pledger to amount pledged\"}},\"version\":1},\"userdoc\":{\"events\":{\"Launch(uint256,address,uint256,uint32,uint32)\":{\"notice\":\"dApps using the contract can observe state changes in transaction logs\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Crowdfund.sol\":\"Crowdfund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Crowdfund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Crowdfund is Initializable {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /**\\n     * @dev struct containing information about each crowdfunding campaign\\n     * @member id - unique number identifying each campaign\\n     * @member creator - the address of the person launching the campaign\\n     * @member goal - the amount of tokens the campaign aims to reach\\n     * @member pledged - the amount of tokens currently pledged to the campaign\\n     * @member startAt - the block.timestamp at which the campaign will begin\\n     * @member endAt - the block.timestamp at which the campaign will be over (must be less than 90 days from when th creator calls the function to launch the campaign)\\n     * @member claimed - whether or not the crowdfunded tokens for the campaign have been claimed\\n     * @member cancelled - whether or not the creator has cancelled the campaign\\n     */\\n\\n    struct Campaign {\\n        uint256 id;\\n        address creator;\\n        uint256 goal;\\n        uint256 pledged;\\n        uint32 startAt;\\n        uint32 endAt;\\n        bool claimed;\\n        bool cancelled;\\n    }\\n    /**\\n     * @dev custom ERC20 which funds take the form of\\n     * Set in initalize function\\n     */\\n    using SafeERC20 for IERC20;\\n    IERC20 public token;\\n\\n    /**\\n     * @dev maximum and minimum length of times a campaign can be\\n     * Set in initalize function\\n     */\\n    uint256 public maxDuration;\\n\\n    uint256 public minDuration;\\n    /**\\n     * @dev used to track and update unique campaign ids\\n     */\\n    uint256 public count;\\n    /**\\n     * @dev mapping of id to Campaign struct\\n     */\\n    mapping(uint256 => Campaign) public campaigns;\\n    /**\\n     * @dev mapping of campaign id to pledger to amount pledged\\n     */\\n    mapping(uint256 => mapping(address => uint256)) public pledgedAmount;\\n\\n    /* ========== EVENTS ========== */\\n    /**\\n     * dApps using the contract can observe state changes in transaction logs\\n     */\\n    event Launch(\\n        uint256 indexed id,\\n        address indexed creator,\\n        uint256 goal,\\n        uint32 startAt,\\n        uint32 endAt\\n    );\\n    event Cancel(uint256 indexed id);\\n    event Pledged(uint256 indexed id, address indexed caller, uint256 amount);\\n    event Unpledged(uint256 indexed id, address indexed caller, uint256 amount);\\n    event Claim(uint256 indexed id);\\n    event Refund(uint256 indexed id, address indexed caller, uint256 amount);\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier campaignExists(uint256 _id) {\\n        require(campaigns[_id].id != 0, \\\"campaign does not exist\\\");\\n        _;\\n    }\\n\\n    modifier notCancelled(uint256 _id) {\\n        require(!campaigns[_id].cancelled, \\\"campaign cancelled\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator(uint256 _id) {\\n        require(campaigns[_id].creator == msg.sender, \\\"not creator\\\");\\n        _;\\n    }\\n\\n    modifier campaignStarted(uint256 _id) {\\n        require(\\n            block.timestamp >= campaigns[_id].startAt,\\n            \\\"campaign not started\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier campaignNotEnded(uint256 _id) {\\n        require(block.timestamp <= campaigns[_id].endAt, \\\"campaign ended\\\");\\n        _;\\n    }\\n\\n    modifier campaignEnded(uint256 _id) {\\n        require(block.timestamp > campaigns[_id].endAt, \\\"campaign not ended\\\");\\n        _;\\n    }\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    /**\\n     * @dev dunction from @openzeppelin to initialize this as the base contract for upgrades\\n     * @dev must be the first function called\\n     */\\n\\n    function initialize(\\n        IERC20 _token,\\n        uint256 _minDuration,\\n        uint256 _maxDuration\\n    ) public initializer {\\n        require(_minDuration < _maxDuration, \\\"minDuration > maxDuration\\\");\\n        token = _token;\\n        minDuration = _minDuration;\\n        maxDuration = _maxDuration;\\n    }\\n\\n    /* ========== EXTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @dev function called by campaign creator to create the crowdfunding campaign and add Campaign to mapping\\n     * @param _goal - the amount of tokens the campaign aims to receive\\n     * @param _startAt - the time the campaign will begin (note: _startAt time is passed in by creator and not necessarily the time the creator calls the launch function)\\n     * @param _endAt - the block.timestamp at which the campaign will end (note: must be >= starting time + minDuration and <= starting time + maxDuration)\\n     */\\n\\n    function launch(uint256 _goal, uint32 _startAt, uint32 _endAt) external {\\n        require(_startAt >= block.timestamp, \\\"start at < now\\\");\\n        require(\\n            _endAt >= _startAt + minDuration &&\\n                _endAt <= _startAt + maxDuration,\\n            \\\"not in min & max duration\\\"\\n        );\\n\\n        count += 1;\\n        campaigns[count] = Campaign({\\n            id: count,\\n            creator: msg.sender,\\n            goal: _goal,\\n            pledged: 0,\\n            startAt: _startAt,\\n            endAt: _endAt,\\n            claimed: false,\\n            cancelled: false\\n        });\\n\\n        emit Launch(count, msg.sender, _goal, _startAt, _endAt);\\n    }\\n\\n    /**\\n     * @dev function called by campaign creator to cancel a crowdfunding campaign\\n     * @param _id - the uinique uint256 id of the campaign to be cancelled\\n     */\\n    function cancel(\\n        uint256 _id\\n    ) external campaignExists(_id) onlyCreator(_id) notCancelled(_id) {\\n        campaigns[_id].cancelled = true;\\n\\n        emit Cancel(_id);\\n    }\\n\\n    /**\\n     * @dev function to transfer tokens from pledger into the contract\\n     * @dev sender must first call approve on the ERC20 token for this contract address and _amount\\n     * @dev campaign must not be cancelled, must be within startAt and endAt times\\n     * @param _id - the uinique uint256 id of the campaign to be pledged\\n     * @param _amount - the amount of tokens trasferred from pledger into contract\\n     */\\n    function pledge(\\n        uint256 _id,\\n        uint256 _amount\\n    )\\n        external\\n        campaignExists(_id)\\n        notCancelled(_id)\\n        campaignStarted(_id)\\n        campaignNotEnded(_id)\\n    {\\n        Campaign storage campaign = campaigns[_id];\\n\\n        campaign.pledged += _amount;\\n        pledgedAmount[_id][msg.sender] += _amount;\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Pledged(_id, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev function for pledger to unpledge their tokens and receive them back BEFORE a campaign has ended (ex: unpledge if campaign cancelled before end time)\\n     * @dev pledger specifies amount of tokens to unpledge, if a campaign has ended and not met goal, pledger then calls refund function to receive all tokens back\\n     * @param _id - the uinique uint256 id of the campaign to be unpledged\\n     * @param _amount - the amount of tokens transferred from contract back to pledger\\n     */\\n    function unpledge(\\n        uint256 _id,\\n        uint256 _amount\\n    ) external campaignExists(_id) campaignNotEnded(_id) {\\n        _refund(msg.sender, _id, _amount);\\n\\n        emit Unpledged(_id, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev function called by campaign creator to receive funds\\n     * @dev caller must be creator, creator cannot have cancelled the campaign, campaign must have passed end at time, the campaign goal must have been met or exceeded\\n     * @dev this function can only be called once by creator\\n     * @param _id - the uinique uint256 id of the campaign which funds are claimed\\n     */\\n    function claim(\\n        uint256 _id\\n    )\\n        external\\n        campaignExists(_id)\\n        onlyCreator(_id)\\n        notCancelled(_id)\\n        campaignEnded(_id)\\n    {\\n        Campaign storage campaign = campaigns[_id];\\n\\n        require(!campaign.claimed, \\\"claimed\\\");\\n        require(campaign.pledged >= campaign.goal, \\\"pledged < goal\\\");\\n\\n        campaign.claimed = true;\\n\\n        token.safeIncreaseAllowance(msg.sender, campaign.pledged);\\n        token.safeTransfer(msg.sender, campaign.pledged);\\n\\n        emit Claim(_id);\\n    }\\n\\n    /**\\n     * @dev function to refund ALL the pledged tokens from pledger in this contract back to the pledger AFTER a campaign has ended and failed\\n     * @dev when a funding goal is not met, pledgers are be able to get a refund of their pledged funds\\n     * @param _id - the uinique uint256 id of the campaign to refund from\\n     */\\n    function refund(\\n        uint256 _id\\n    ) external campaignExists(_id) campaignEnded(_id) {\\n        Campaign storage campaign = campaigns[_id];\\n\\n        require(campaign.pledged < campaign.goal, \\\"pledged >= goal\\\");\\n\\n        uint256 _bal = pledgedAmount[_id][msg.sender];\\n        _refund(msg.sender, _id, _bal);\\n\\n        emit Refund(_id, msg.sender, _bal);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @dev internal function to safeTransfer tokens from this contract back to a pledger\\n     * @param _donor - the address of the pledger receiving the refund\\n     * @param _id - the uinique uint256 id of the campaign being refunded from\\n     * @param _amount - the amount of tokens transferred from contract back to pledger\\n     */\\n    function _refund(address _donor, uint256 _id, uint256 _amount) private {\\n        require(\\n            _amount > 0 && _amount <= pledgedAmount[_id][_donor],\\n            \\\"invalid amount\\\"\\n        );\\n\\n        pledgedAmount[_id][_donor] -= _amount;\\n        campaigns[_id].pledged -= _amount;\\n\\n        token.safeIncreaseAllowance(_donor, _amount);\\n        token.safeTransfer(_donor, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd4301e16a53602401ce15f9faca020e834c3cbb66756d706ce3ef035dd2b4430\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063567157611161008c5780637a1ac61e116100665780637a1ac61e146101f1578063aa4fb63a1461020d578063fc0c546a1461023d578063fde327be1461025b576100cf565b806356715761146101995780636db5c8fd146101b7578063711853ab146101d5576100cf565b806306661abd146100d4578063141961bc146100f2578063278ecde1146101295780632c63f14614610145578063379607f51461016157806340e58ee51461017d575b600080fd5b6100dc610277565b6040516100e991906119f0565b60405180910390f35b61010c60048036038101906101079190611a3c565b61027d565b604051610120989796959493929190611ae4565b60405180910390f35b610143600480360381019061013e9190611a3c565b61031f565b005b61015f600480360381019061015a9190611b8e565b610500565b005b61017b60048036038101906101769190611a3c565b6107ae565b005b61019760048036038101906101929190611a3c565b610b2a565b005b6101a1610cf1565b6040516101ae91906119f0565b60405180910390f35b6101bf610cf7565b6040516101cc91906119f0565b60405180910390f35b6101ef60048036038101906101ea9190611be1565b610cfd565b005b61020b60048036038101906102069190611c5f565b610e28565b005b61022760048036038101906102229190611cde565b610ff2565b60405161023491906119f0565b60405180910390f35b610245611017565b6040516102529190611d7d565b60405180910390f35b61027560048036038101906102709190611be1565b61103d565b005b60035481565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900460ff16908060040160099054906101000a900460ff16905088565b8060006004600083815260200190815260200160002060000154141561037a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037190611df5565b60405180910390fd5b816004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff1642116103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e090611e61565b60405180910390fd5b6000600460008581526020019081526020016000209050806002015481600301541061044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190611ecd565b60405180910390fd5b60006005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506104aa33868361131d565b3373ffffffffffffffffffffffffffffffffffffffff16857f21e12a7cad0da5928167e1084ea4d5fdf8d9af66657a2543a9ac76a0ca081477836040516104f191906119f0565b60405180910390a35050505050565b428263ffffffff161015610549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054090611f39565b60405180910390fd5b6002548263ffffffff1661055d9190611f88565b8163ffffffff161015801561058b57506001548263ffffffff166105819190611f88565b8163ffffffff1611155b6105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c19061202a565b60405180910390fd5b6001600360008282546105dd9190611f88565b9250508190555060405180610100016040528060035481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600081526020018363ffffffff1681526020018263ffffffff168152602001600015158152602001600015158152506004600060035481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160040160046101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160040160086101000a81548160ff02191690831515021790555060e08201518160040160096101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff166003547f0601cd0d650b473037e838a2696d41e654433d065b3f56b28d1d3302e44a304f8585856040516107a19392919061204a565b60405180910390a3505050565b80600060046000838152602001908152602001600020600001541415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090611df5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a5906120cd565b60405180910390fd5b826004600082815260200190815260200160002060040160099054906101000a900460ff1615610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90612139565b60405180910390fd5b836004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff164211610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990611e61565b60405180910390fd5b60006004600087815260200190815260200160002090508060040160089054906101000a900460ff16156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e2906121a5565b60405180910390fd5b806002015481600301541015610a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2d90612211565b60405180910390fd5b60018160040160086101000a81548160ff021916908315150217905550610aa4338260030154600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114ef9092919063ffffffff16565b610af5338260030154600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116109092919063ffffffff16565b857f7bb2b3c10797baccb6f8c4791f1edd6ca2f0d028ee0eda64b01a9a57e3a653f760405160405180910390a2505050505050565b80600060046000838152602001908152602001600020600001541415610b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7c90611df5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c21906120cd565b60405180910390fd5b826004600082815260200190815260200160002060040160099054906101000a900460ff1615610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690612139565b60405180910390fd5b60016004600086815260200190815260200160002060040160096101000a81548160ff021916908315150217905550837f8bf30e7ff26833413be5f69e1d373744864d600b664204b4a2f9844a8eedb9ed60405160405180910390a250505050565b60025481565b60015481565b81600060046000838152602001908152602001600020600001541415610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f90611df5565b60405180910390fd5b826004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff16421115610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf9061227d565b60405180910390fd5b610dd333858561131d565b3373ffffffffffffffffffffffffffffffffffffffff16847ffcd29b1632c6748a9a4bb9b4cd5c6486c3c84a8550dce2368f83fef3969d968585604051610e1a91906119f0565b60405180910390a350505050565b60008060019054906101000a900460ff16159050808015610e595750600160008054906101000a900460ff1660ff16105b80610e865750610e6830611696565b158015610e855750600160008054906101000a900460ff1660ff16145b5b610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc9061230f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610f02576001600060016101000a81548160ff0219169083151502179055505b818310610f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3b9061237b565b60405180910390fd5b83600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600281905550816001819055508015610fec5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610fe391906123e3565b60405180910390a15b50505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81600060046000838152602001908152602001600020600001541415611098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f90611df5565b60405180910390fd5b826004600082815260200190815260200160002060040160099054906101000a900460ff16156110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490612139565b60405180910390fd5b836004600082815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff1642101561116d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111649061244a565b60405180910390fd5b846004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff164211156111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d49061227d565b60405180910390fd5b6000600460008881526020019081526020016000209050858160030160008282546112089190611f88565b92505081905550856005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461126f9190611f88565b925050819055506112c5333088600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116b9909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16877f2757ac6a40883f4491cc56930ae964df9034e343e660d5179eb01e198336756b8860405161130c91906119f0565b60405180910390a350505050505050565b60008111801561137d57506005600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111155b6113bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b3906124b6565b60405180910390fd5b806005600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461141c91906124d6565b925050819055508060046000848152602001908152602001600020600301600082825461144991906124d6565b9250508190555061149d8382600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114ef9092919063ffffffff16565b6114ea8382600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116109092919063ffffffff16565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b815260040161152d92919061250a565b60206040518083038186803b15801561154557600080fd5b505afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190612548565b6115879190611f88565b905061160a8463095ea7b360e01b85846040516024016115a8929190612575565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611742565b50505050565b6116918363a9059cbb60e01b848460405160240161162f929190612575565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611742565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61173c846323b872dd60e01b8585856040516024016116da9392919061259e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611742565b50505050565b60006117a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118099092919063ffffffff16565b905060008151111561180457808060200190518101906117c49190612601565b611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa906126a0565b60405180910390fd5b5b505050565b60606118188484600085611821565b90509392505050565b606082471015611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90612732565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161188f91906127cc565b60006040518083038185875af1925050503d80600081146118cc576040519150601f19603f3d011682016040523d82523d6000602084013e6118d1565b606091505b50915091506118e2878383876118ee565b92505050949350505050565b60608315611951576000835114156119495761190985611964565b611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193f9061282f565b60405180910390fd5b5b82905061195c565b61195b8383611987565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561199a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ce91906128a4565b60405180910390fd5b6000819050919050565b6119ea816119d7565b82525050565b6000602082019050611a0560008301846119e1565b92915050565b600080fd5b611a19816119d7565b8114611a2457600080fd5b50565b600081359050611a3681611a10565b92915050565b600060208284031215611a5257611a51611a0b565b5b6000611a6084828501611a27565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9482611a69565b9050919050565b611aa481611a89565b82525050565b600063ffffffff82169050919050565b611ac381611aaa565b82525050565b60008115159050919050565b611ade81611ac9565b82525050565b600061010082019050611afa600083018b6119e1565b611b07602083018a611a9b565b611b1460408301896119e1565b611b2160608301886119e1565b611b2e6080830187611aba565b611b3b60a0830186611aba565b611b4860c0830185611ad5565b611b5560e0830184611ad5565b9998505050505050505050565b611b6b81611aaa565b8114611b7657600080fd5b50565b600081359050611b8881611b62565b92915050565b600080600060608486031215611ba757611ba6611a0b565b5b6000611bb586828701611a27565b9350506020611bc686828701611b79565b9250506040611bd786828701611b79565b9150509250925092565b60008060408385031215611bf857611bf7611a0b565b5b6000611c0685828601611a27565b9250506020611c1785828601611a27565b9150509250929050565b6000611c2c82611a89565b9050919050565b611c3c81611c21565b8114611c4757600080fd5b50565b600081359050611c5981611c33565b92915050565b600080600060608486031215611c7857611c77611a0b565b5b6000611c8686828701611c4a565b9350506020611c9786828701611a27565b9250506040611ca886828701611a27565b9150509250925092565b611cbb81611a89565b8114611cc657600080fd5b50565b600081359050611cd881611cb2565b92915050565b60008060408385031215611cf557611cf4611a0b565b5b6000611d0385828601611a27565b9250506020611d1485828601611cc9565b9150509250929050565b6000819050919050565b6000611d43611d3e611d3984611a69565b611d1e565b611a69565b9050919050565b6000611d5582611d28565b9050919050565b6000611d6782611d4a565b9050919050565b611d7781611d5c565b82525050565b6000602082019050611d926000830184611d6e565b92915050565b600082825260208201905092915050565b7f63616d706169676e20646f6573206e6f74206578697374000000000000000000600082015250565b6000611ddf601783611d98565b9150611dea82611da9565b602082019050919050565b60006020820190508181036000830152611e0e81611dd2565b9050919050565b7f63616d706169676e206e6f7420656e6465640000000000000000000000000000600082015250565b6000611e4b601283611d98565b9150611e5682611e15565b602082019050919050565b60006020820190508181036000830152611e7a81611e3e565b9050919050565b7f706c6564676564203e3d20676f616c0000000000000000000000000000000000600082015250565b6000611eb7600f83611d98565b9150611ec282611e81565b602082019050919050565b60006020820190508181036000830152611ee681611eaa565b9050919050565b7f7374617274206174203c206e6f77000000000000000000000000000000000000600082015250565b6000611f23600e83611d98565b9150611f2e82611eed565b602082019050919050565b60006020820190508181036000830152611f5281611f16565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f93826119d7565b9150611f9e836119d7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fd357611fd2611f59565b5b828201905092915050565b7f6e6f7420696e206d696e2026206d6178206475726174696f6e00000000000000600082015250565b6000612014601983611d98565b915061201f82611fde565b602082019050919050565b6000602082019050818103600083015261204381612007565b9050919050565b600060608201905061205f60008301866119e1565b61206c6020830185611aba565b6120796040830184611aba565b949350505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b60006120b7600b83611d98565b91506120c282612081565b602082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b7f63616d706169676e2063616e63656c6c65640000000000000000000000000000600082015250565b6000612123601283611d98565b915061212e826120ed565b602082019050919050565b6000602082019050818103600083015261215281612116565b9050919050565b7f636c61696d656400000000000000000000000000000000000000000000000000600082015250565b600061218f600783611d98565b915061219a82612159565b602082019050919050565b600060208201905081810360008301526121be81612182565b9050919050565b7f706c6564676564203c20676f616c000000000000000000000000000000000000600082015250565b60006121fb600e83611d98565b9150612206826121c5565b602082019050919050565b6000602082019050818103600083015261222a816121ee565b9050919050565b7f63616d706169676e20656e646564000000000000000000000000000000000000600082015250565b6000612267600e83611d98565b915061227282612231565b602082019050919050565b600060208201905081810360008301526122968161225a565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006122f9602e83611d98565b91506123048261229d565b604082019050919050565b60006020820190508181036000830152612328816122ec565b9050919050565b7f6d696e4475726174696f6e203e206d61784475726174696f6e00000000000000600082015250565b6000612365601983611d98565b91506123708261232f565b602082019050919050565b6000602082019050818103600083015261239481612358565b9050919050565b6000819050919050565b600060ff82169050919050565b60006123cd6123c86123c38461239b565b611d1e565b6123a5565b9050919050565b6123dd816123b2565b82525050565b60006020820190506123f860008301846123d4565b92915050565b7f63616d706169676e206e6f742073746172746564000000000000000000000000600082015250565b6000612434601483611d98565b915061243f826123fe565b602082019050919050565b6000602082019050818103600083015261246381612427565b9050919050565b7f696e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b60006124a0600e83611d98565b91506124ab8261246a565b602082019050919050565b600060208201905081810360008301526124cf81612493565b9050919050565b60006124e1826119d7565b91506124ec836119d7565b9250828210156124ff576124fe611f59565b5b828203905092915050565b600060408201905061251f6000830185611a9b565b61252c6020830184611a9b565b9392505050565b60008151905061254281611a10565b92915050565b60006020828403121561255e5761255d611a0b565b5b600061256c84828501612533565b91505092915050565b600060408201905061258a6000830185611a9b565b61259760208301846119e1565b9392505050565b60006060820190506125b36000830186611a9b565b6125c06020830185611a9b565b6125cd60408301846119e1565b949350505050565b6125de81611ac9565b81146125e957600080fd5b50565b6000815190506125fb816125d5565b92915050565b60006020828403121561261757612616611a0b565b5b6000612625848285016125ec565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061268a602a83611d98565b91506126958261262e565b604082019050919050565b600060208201905081810360008301526126b98161267d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061271c602683611d98565b9150612727826126c0565b604082019050919050565b6000602082019050818103600083015261274b8161270f565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561278657808201518184015260208101905061276b565b83811115612795576000848401525b50505050565b60006127a682612752565b6127b0818561275d565b93506127c0818560208601612768565b80840191505092915050565b60006127d8828461279b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612819601d83611d98565b9150612824826127e3565b602082019050919050565b600060208201905081810360008301526128488161280c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006128768261284f565b6128808185611d98565b9350612890818560208601612768565b6128998161285a565b840191505092915050565b600060208201905081810360008301526128be818461286b565b90509291505056fea2646970667358221220dec11f1330b140bec8881e6dd9d8c6f20789eb64567f40872c6a219784c2796f64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063567157611161008c5780637a1ac61e116100665780637a1ac61e146101f1578063aa4fb63a1461020d578063fc0c546a1461023d578063fde327be1461025b576100cf565b806356715761146101995780636db5c8fd146101b7578063711853ab146101d5576100cf565b806306661abd146100d4578063141961bc146100f2578063278ecde1146101295780632c63f14614610145578063379607f51461016157806340e58ee51461017d575b600080fd5b6100dc610277565b6040516100e991906119f0565b60405180910390f35b61010c60048036038101906101079190611a3c565b61027d565b604051610120989796959493929190611ae4565b60405180910390f35b610143600480360381019061013e9190611a3c565b61031f565b005b61015f600480360381019061015a9190611b8e565b610500565b005b61017b60048036038101906101769190611a3c565b6107ae565b005b61019760048036038101906101929190611a3c565b610b2a565b005b6101a1610cf1565b6040516101ae91906119f0565b60405180910390f35b6101bf610cf7565b6040516101cc91906119f0565b60405180910390f35b6101ef60048036038101906101ea9190611be1565b610cfd565b005b61020b60048036038101906102069190611c5f565b610e28565b005b61022760048036038101906102229190611cde565b610ff2565b60405161023491906119f0565b60405180910390f35b610245611017565b6040516102529190611d7d565b60405180910390f35b61027560048036038101906102709190611be1565b61103d565b005b60035481565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900460ff16908060040160099054906101000a900460ff16905088565b8060006004600083815260200190815260200160002060000154141561037a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037190611df5565b60405180910390fd5b816004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff1642116103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e090611e61565b60405180910390fd5b6000600460008581526020019081526020016000209050806002015481600301541061044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190611ecd565b60405180910390fd5b60006005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506104aa33868361131d565b3373ffffffffffffffffffffffffffffffffffffffff16857f21e12a7cad0da5928167e1084ea4d5fdf8d9af66657a2543a9ac76a0ca081477836040516104f191906119f0565b60405180910390a35050505050565b428263ffffffff161015610549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054090611f39565b60405180910390fd5b6002548263ffffffff1661055d9190611f88565b8163ffffffff161015801561058b57506001548263ffffffff166105819190611f88565b8163ffffffff1611155b6105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c19061202a565b60405180910390fd5b6001600360008282546105dd9190611f88565b9250508190555060405180610100016040528060035481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600081526020018363ffffffff1681526020018263ffffffff168152602001600015158152602001600015158152506004600060035481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160040160046101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160040160086101000a81548160ff02191690831515021790555060e08201518160040160096101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff166003547f0601cd0d650b473037e838a2696d41e654433d065b3f56b28d1d3302e44a304f8585856040516107a19392919061204a565b60405180910390a3505050565b80600060046000838152602001908152602001600020600001541415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090611df5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a5906120cd565b60405180910390fd5b826004600082815260200190815260200160002060040160099054906101000a900460ff1615610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90612139565b60405180910390fd5b836004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff164211610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990611e61565b60405180910390fd5b60006004600087815260200190815260200160002090508060040160089054906101000a900460ff16156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e2906121a5565b60405180910390fd5b806002015481600301541015610a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2d90612211565b60405180910390fd5b60018160040160086101000a81548160ff021916908315150217905550610aa4338260030154600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114ef9092919063ffffffff16565b610af5338260030154600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116109092919063ffffffff16565b857f7bb2b3c10797baccb6f8c4791f1edd6ca2f0d028ee0eda64b01a9a57e3a653f760405160405180910390a2505050505050565b80600060046000838152602001908152602001600020600001541415610b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7c90611df5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c21906120cd565b60405180910390fd5b826004600082815260200190815260200160002060040160099054906101000a900460ff1615610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690612139565b60405180910390fd5b60016004600086815260200190815260200160002060040160096101000a81548160ff021916908315150217905550837f8bf30e7ff26833413be5f69e1d373744864d600b664204b4a2f9844a8eedb9ed60405160405180910390a250505050565b60025481565b60015481565b81600060046000838152602001908152602001600020600001541415610d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4f90611df5565b60405180910390fd5b826004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff16421115610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf9061227d565b60405180910390fd5b610dd333858561131d565b3373ffffffffffffffffffffffffffffffffffffffff16847ffcd29b1632c6748a9a4bb9b4cd5c6486c3c84a8550dce2368f83fef3969d968585604051610e1a91906119f0565b60405180910390a350505050565b60008060019054906101000a900460ff16159050808015610e595750600160008054906101000a900460ff1660ff16105b80610e865750610e6830611696565b158015610e855750600160008054906101000a900460ff1660ff16145b5b610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc9061230f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610f02576001600060016101000a81548160ff0219169083151502179055505b818310610f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3b9061237b565b60405180910390fd5b83600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600281905550816001819055508015610fec5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610fe391906123e3565b60405180910390a15b50505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81600060046000838152602001908152602001600020600001541415611098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f90611df5565b60405180910390fd5b826004600082815260200190815260200160002060040160099054906101000a900460ff16156110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490612139565b60405180910390fd5b836004600082815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff1642101561116d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111649061244a565b60405180910390fd5b846004600082815260200190815260200160002060040160049054906101000a900463ffffffff1663ffffffff164211156111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d49061227d565b60405180910390fd5b6000600460008881526020019081526020016000209050858160030160008282546112089190611f88565b92505081905550856005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461126f9190611f88565b925050819055506112c5333088600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116b9909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16877f2757ac6a40883f4491cc56930ae964df9034e343e660d5179eb01e198336756b8860405161130c91906119f0565b60405180910390a350505050505050565b60008111801561137d57506005600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111155b6113bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b3906124b6565b60405180910390fd5b806005600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461141c91906124d6565b925050819055508060046000848152602001908152602001600020600301600082825461144991906124d6565b9250508190555061149d8382600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114ef9092919063ffffffff16565b6114ea8382600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116109092919063ffffffff16565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b815260040161152d92919061250a565b60206040518083038186803b15801561154557600080fd5b505afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190612548565b6115879190611f88565b905061160a8463095ea7b360e01b85846040516024016115a8929190612575565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611742565b50505050565b6116918363a9059cbb60e01b848460405160240161162f929190612575565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611742565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61173c846323b872dd60e01b8585856040516024016116da9392919061259e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611742565b50505050565b60006117a4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118099092919063ffffffff16565b905060008151111561180457808060200190518101906117c49190612601565b611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa906126a0565b60405180910390fd5b5b505050565b60606118188484600085611821565b90509392505050565b606082471015611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90612732565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161188f91906127cc565b60006040518083038185875af1925050503d80600081146118cc576040519150601f19603f3d011682016040523d82523d6000602084013e6118d1565b606091505b50915091506118e2878383876118ee565b92505050949350505050565b60608315611951576000835114156119495761190985611964565b611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193f9061282f565b60405180910390fd5b5b82905061195c565b61195b8383611987565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561199a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ce91906128a4565b60405180910390fd5b6000819050919050565b6119ea816119d7565b82525050565b6000602082019050611a0560008301846119e1565b92915050565b600080fd5b611a19816119d7565b8114611a2457600080fd5b50565b600081359050611a3681611a10565b92915050565b600060208284031215611a5257611a51611a0b565b5b6000611a6084828501611a27565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9482611a69565b9050919050565b611aa481611a89565b82525050565b600063ffffffff82169050919050565b611ac381611aaa565b82525050565b60008115159050919050565b611ade81611ac9565b82525050565b600061010082019050611afa600083018b6119e1565b611b07602083018a611a9b565b611b1460408301896119e1565b611b2160608301886119e1565b611b2e6080830187611aba565b611b3b60a0830186611aba565b611b4860c0830185611ad5565b611b5560e0830184611ad5565b9998505050505050505050565b611b6b81611aaa565b8114611b7657600080fd5b50565b600081359050611b8881611b62565b92915050565b600080600060608486031215611ba757611ba6611a0b565b5b6000611bb586828701611a27565b9350506020611bc686828701611b79565b9250506040611bd786828701611b79565b9150509250925092565b60008060408385031215611bf857611bf7611a0b565b5b6000611c0685828601611a27565b9250506020611c1785828601611a27565b9150509250929050565b6000611c2c82611a89565b9050919050565b611c3c81611c21565b8114611c4757600080fd5b50565b600081359050611c5981611c33565b92915050565b600080600060608486031215611c7857611c77611a0b565b5b6000611c8686828701611c4a565b9350506020611c9786828701611a27565b9250506040611ca886828701611a27565b9150509250925092565b611cbb81611a89565b8114611cc657600080fd5b50565b600081359050611cd881611cb2565b92915050565b60008060408385031215611cf557611cf4611a0b565b5b6000611d0385828601611a27565b9250506020611d1485828601611cc9565b9150509250929050565b6000819050919050565b6000611d43611d3e611d3984611a69565b611d1e565b611a69565b9050919050565b6000611d5582611d28565b9050919050565b6000611d6782611d4a565b9050919050565b611d7781611d5c565b82525050565b6000602082019050611d926000830184611d6e565b92915050565b600082825260208201905092915050565b7f63616d706169676e20646f6573206e6f74206578697374000000000000000000600082015250565b6000611ddf601783611d98565b9150611dea82611da9565b602082019050919050565b60006020820190508181036000830152611e0e81611dd2565b9050919050565b7f63616d706169676e206e6f7420656e6465640000000000000000000000000000600082015250565b6000611e4b601283611d98565b9150611e5682611e15565b602082019050919050565b60006020820190508181036000830152611e7a81611e3e565b9050919050565b7f706c6564676564203e3d20676f616c0000000000000000000000000000000000600082015250565b6000611eb7600f83611d98565b9150611ec282611e81565b602082019050919050565b60006020820190508181036000830152611ee681611eaa565b9050919050565b7f7374617274206174203c206e6f77000000000000000000000000000000000000600082015250565b6000611f23600e83611d98565b9150611f2e82611eed565b602082019050919050565b60006020820190508181036000830152611f5281611f16565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f93826119d7565b9150611f9e836119d7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fd357611fd2611f59565b5b828201905092915050565b7f6e6f7420696e206d696e2026206d6178206475726174696f6e00000000000000600082015250565b6000612014601983611d98565b915061201f82611fde565b602082019050919050565b6000602082019050818103600083015261204381612007565b9050919050565b600060608201905061205f60008301866119e1565b61206c6020830185611aba565b6120796040830184611aba565b949350505050565b7f6e6f742063726561746f72000000000000000000000000000000000000000000600082015250565b60006120b7600b83611d98565b91506120c282612081565b602082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b7f63616d706169676e2063616e63656c6c65640000000000000000000000000000600082015250565b6000612123601283611d98565b915061212e826120ed565b602082019050919050565b6000602082019050818103600083015261215281612116565b9050919050565b7f636c61696d656400000000000000000000000000000000000000000000000000600082015250565b600061218f600783611d98565b915061219a82612159565b602082019050919050565b600060208201905081810360008301526121be81612182565b9050919050565b7f706c6564676564203c20676f616c000000000000000000000000000000000000600082015250565b60006121fb600e83611d98565b9150612206826121c5565b602082019050919050565b6000602082019050818103600083015261222a816121ee565b9050919050565b7f63616d706169676e20656e646564000000000000000000000000000000000000600082015250565b6000612267600e83611d98565b915061227282612231565b602082019050919050565b600060208201905081810360008301526122968161225a565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006122f9602e83611d98565b91506123048261229d565b604082019050919050565b60006020820190508181036000830152612328816122ec565b9050919050565b7f6d696e4475726174696f6e203e206d61784475726174696f6e00000000000000600082015250565b6000612365601983611d98565b91506123708261232f565b602082019050919050565b6000602082019050818103600083015261239481612358565b9050919050565b6000819050919050565b600060ff82169050919050565b60006123cd6123c86123c38461239b565b611d1e565b6123a5565b9050919050565b6123dd816123b2565b82525050565b60006020820190506123f860008301846123d4565b92915050565b7f63616d706169676e206e6f742073746172746564000000000000000000000000600082015250565b6000612434601483611d98565b915061243f826123fe565b602082019050919050565b6000602082019050818103600083015261246381612427565b9050919050565b7f696e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b60006124a0600e83611d98565b91506124ab8261246a565b602082019050919050565b600060208201905081810360008301526124cf81612493565b9050919050565b60006124e1826119d7565b91506124ec836119d7565b9250828210156124ff576124fe611f59565b5b828203905092915050565b600060408201905061251f6000830185611a9b565b61252c6020830184611a9b565b9392505050565b60008151905061254281611a10565b92915050565b60006020828403121561255e5761255d611a0b565b5b600061256c84828501612533565b91505092915050565b600060408201905061258a6000830185611a9b565b61259760208301846119e1565b9392505050565b60006060820190506125b36000830186611a9b565b6125c06020830185611a9b565b6125cd60408301846119e1565b949350505050565b6125de81611ac9565b81146125e957600080fd5b50565b6000815190506125fb816125d5565b92915050565b60006020828403121561261757612616611a0b565b5b6000612625848285016125ec565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061268a602a83611d98565b91506126958261262e565b604082019050919050565b600060208201905081810360008301526126b98161267d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061271c602683611d98565b9150612727826126c0565b604082019050919050565b6000602082019050818103600083015261274b8161270f565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561278657808201518184015260208101905061276b565b83811115612795576000848401525b50505050565b60006127a682612752565b6127b0818561275d565b93506127c0818560208601612768565b80840191505092915050565b60006127d8828461279b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612819601d83611d98565b9150612824826127e3565b602082019050919050565b600060208201905081810360008301526128488161280c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006128768261284f565b6128808185611d98565b9350612890818560208601612768565b6128998161285a565b840191505092915050565b600060208201905081810360008301526128be818461286b565b90509291505056fea2646970667358221220dec11f1330b140bec8881e6dd9d8c6f20789eb64567f40872c6a219784c2796f64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancel(uint256)": {
        "details": "function called by campaign creator to cancel a crowdfunding campaign",
        "params": {
          "_id": "- the uinique uint256 id of the campaign to be cancelled"
        }
      },
      "claim(uint256)": {
        "details": "function called by campaign creator to receive fundscaller must be creator, creator cannot have cancelled the campaign, campaign must have passed end at time, the campaign goal must have been met or exceededthis function can only be called once by creator",
        "params": {
          "_id": "- the uinique uint256 id of the campaign which funds are claimed"
        }
      },
      "initialize(address,uint256,uint256)": {
        "details": "dunction from @openzeppelin to initialize this as the base contract for upgradesmust be the first function called"
      },
      "launch(uint256,uint32,uint32)": {
        "details": "function called by campaign creator to create the crowdfunding campaign and add Campaign to mapping",
        "params": {
          "_endAt": "- the block.timestamp at which the campaign will end (note: must be >= starting time + minDuration and <= starting time + maxDuration)",
          "_goal": "- the amount of tokens the campaign aims to receive",
          "_startAt": "- the time the campaign will begin (note: _startAt time is passed in by creator and not necessarily the time the creator calls the launch function)"
        }
      },
      "pledge(uint256,uint256)": {
        "details": "function to transfer tokens from pledger into the contractsender must first call approve on the ERC20 token for this contract address and _amountcampaign must not be cancelled, must be within startAt and endAt times",
        "params": {
          "_amount": "- the amount of tokens trasferred from pledger into contract",
          "_id": "- the uinique uint256 id of the campaign to be pledged"
        }
      },
      "refund(uint256)": {
        "details": "function to refund ALL the pledged tokens from pledger in this contract back to the pledger AFTER a campaign has ended and failedwhen a funding goal is not met, pledgers are be able to get a refund of their pledged funds",
        "params": {
          "_id": "- the uinique uint256 id of the campaign to refund from"
        }
      },
      "unpledge(uint256,uint256)": {
        "details": "function for pledger to unpledge their tokens and receive them back BEFORE a campaign has ended (ex: unpledge if campaign cancelled before end time)pledger specifies amount of tokens to unpledge, if a campaign has ended and not met goal, pledger then calls refund function to receive all tokens back",
        "params": {
          "_amount": "- the amount of tokens transferred from contract back to pledger",
          "_id": "- the uinique uint256 id of the campaign to be unpledged"
        }
      }
    },
    "stateVariables": {
      "campaigns": {
        "details": "mapping of id to Campaign struct"
      },
      "count": {
        "details": "used to track and update unique campaign ids"
      },
      "maxDuration": {
        "details": "maximum and minimum length of times a campaign can be Set in initalize function"
      },
      "pledgedAmount": {
        "details": "mapping of campaign id to pledger to amount pledged"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Launch(uint256,address,uint256,uint32,uint32)": {
        "notice": "dApps using the contract can observe state changes in transaction logs"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1208,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "token",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)530"
      },
      {
        "astId": 1211,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "maxDuration",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1213,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "minDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1216,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "count",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "campaigns",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Campaign)1201_storage)"
      },
      {
        "astId": 1229,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "pledgedAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)530": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Campaign)1201_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Crowdfund.Campaign)",
        "numberOfBytes": "32",
        "value": "t_struct(Campaign)1201_storage"
      },
      "t_struct(Campaign)1201_storage": {
        "encoding": "inplace",
        "label": "struct Crowdfund.Campaign",
        "members": [
          {
            "astId": 1186,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1188,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1190,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "goal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1192,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "pledged",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1194,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "startAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1196,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "endAt",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1198,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "claimed",
            "offset": 8,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1200,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "cancelled",
            "offset": 9,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}